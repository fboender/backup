#!/bin/sh
#
#  backup v0.8
#
#  Backup allows the automation of a backup process through the use of a
#  file which contains the paths to backup. You can use this program from 
#  the commandline, or by invoking it, let say, monthly through a cronjob.
#  To run this script through a cronjob, and be mailed automatically when
#  a backup is made, you can add the following line to your /etc/crontab:
#
#  00 2	1 * *   root	/usr/local/sbin/backup
#
#  to run a backup every first of the month at 02:00 and mail the result 
#  to the root user (if your crontab is set up correctly anyways)
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

#
# usage() : Show usage information (--help)
#
function usage() {
	echo "Backup v$VERSION"
	echo "Usage: $0 -v -c"
	echo
	echo "-c, --config CONFIG   Configuration file to use."
	echo "-v, --verbose         Show lots of output"
	echo "-d, --debug           Show debug output"
}

#
# msg(message) : Show message on STDOUT if FLAG_VERBOSE is set (-v)
#
function msg() {
	if [ "$FLAG_VERBOSE" ]; then
		echo -e "$*"
	fi
}

#
# err(message) : Show error message on STDERR
#
function err() {
	echo -e "$*" 1>&2
}

#
# dbg(message) : Show debugging message on STDOUT if FLAG_DEBUG is set (-d)
#
function dbg() {
	if [ "$FLAG_DEBUG" ]; then
		echo -e "$*"
	fi
}

#
# run_cmd(cmd) : Run a command and capture error output/log errors/check return
# code, etc
#
function run_cmd() {
	CMD="$@"
	dbg "Running command '$CMD'"
	$CMD
	if [ $? -ne 0 ]; then
		err "The command '$CMD' didn't return an exit code of 0. Aborting..."
		exit
	fi
}

#
# handle_cmdline() : Read, process and set commandline options to flags, etc
#
function handle_cmdline() {
	TEMP=`getopt -o vdc:h --long verbose,debug,config:,help -n 'backup' -- "$@"`

	if [ $? != 0 ] ; then err "Terminating..."; exit 1 ; fi

	eval set -- "$TEMP"

	while true ; do
		case "$1" in
			-c|--config)
				CONFIG="$2";
				shift 2
				;;
			-v|--verbose)
				FLAG_VERBOSE=1; 
				shift 1
				;;
			-d|--debug)
				FLAG_DEBUG=1;
				dbg "Turning on debugging mode."
				shift 1
				;;
			-h|--help)
				FLAG_HELP=1;
				shift 1
				;;
			--)
				shift 1;
				break ;;
			*)
				err "Internal error!";
				exit 1
				;;
		esac
	done

	if [ "$FLAG_HELP" ]; then
		usage
		exit
	fi
}

#
# test_config(CONFIG): Test is a certain file is a correct configuration
#                      file.
#
function test_config() {
	CONFIG="$1"
	
	HAS_SOURCE_LIST=`grep "^.*SOURCE_LIST.*=" "$CONFIG"`
	if [ -z "$HAS_SOURCE_LIST" ]; then
		return 1
	else
		return 0
	fi
}

#
# get_config(CONFIG) : Find a configuration file. Ff CONFIG is given, it will
#                      be tried first. Otherwise a config file is searched
#                      for in various locations. If one is found it is parsed
#                      and the various settings in the file are set as global
#                      variables.
#
function get_config() {
	CONFIG="$1"

	dbg "Trying to find a suitable configuration file."
	dbg "$1"

	# Find configuration file
	if [ "$CONFIG" ]; then
		dbg "Trying config $CONFIG."
		if [ -r "$CONFIG" ]; then
			FINAL_CONFIG="$CONFIG"
		else
			err "Couldn't read config '$CONFIG'. Aborting."
			exit
		fi
	elif [ -r ./backup.conf ]; then 
		dbg "Trying ./backup.conf."
		FINAL_CONFIG="./backup.conf"
	elif [ -r /etc/backup.conf ]; then 
		dbg "Trying /etc/backup.conf."
		FINAL_CONFIG="/etc/backup.conf"
	else 
		err "No usable configuration found. Aborting.."
		exit
	fi

	msg "Using config '$FINAL_CONFIG'."

	# Verify that it's a backup configuration 
	test_config "$FINAL_CONFIG"
	EXITCODE=$?
	if [ "$EXITCODE" -ne "0" ]; then
		err "Invalid configuration file. Aborting..."
		exit
	fi
	source "$FINAL_CONFIG"

	# Verify configuration
	if [ ! "$SOURCE_LIST" ]; then
		err "Configuration '$CONFIG' missing a SOURCE_LIST. Aborting..."
		exit
	fi
	if [ ! "$BACKUP_DIR" ]; then
		err "Configuration '$CONFIG' missing a BACKUP_DIR. Aborting..."
		exit
	fi
	if [ ! "$DIR_FORMAT" ]; then
		err "Configuration '$CONFIG' missing a DIR_FORMAT. Aborting..."
		exit
	fi
	if [ ! "$STATE_DIR" ]; then
		err "Configuration '$CONFIG' missing a STATE_DIR. Aborting..."
		exit
	fi
	if [ ! "$MODE" ]; then
		MODE=600
	fi
	if [ ! "$OWNERSHIP" ]; then
		OWNERSHIP="`id -un`:`id -gn`"
	fi
	if [ ! "$NICENESS" ]; then
		NICENESS=19
	fi
	if [ ! "$PGP" ]; then
		PGP=0
	fi
	if [ ! "$PGP_RECP" ]; then
		PGP_RECP=
	fi
	if [ "$PRE_EACH" ]; then
		if [ ! -x "$PRE_EACH" ]; then
			err "Couldn't run PRE_EACH script '$PRE_EACH'. Aborting..."
			exit
		fi
	fi
	if [ "$POST_EACH" ]; then
		if [ ! -x "$POST_EACH" ]; then
			err "Couldn't run POST_EACH script '$POST_EACH'. Aborting..."
			exit
		fi
	fi
	if [ ! -r "$SOURCE_LIST" ]; then
		err "Can't find or read $SOURCE_LIST. Aborting..."
		exit
	fi

	# Sanitize configuration options
	DEST_DIR="`echo $BACKUP_DIR | sed -e 's/\/$//'`/"
	DEST_DIR="$DEST_DIR`echo $DIR_FORMAT | sed -e 's/\/$//'`/"
	msg "Destination dir is '$DEST_DIR'"
	STATE_DIR="`echo $STATE_DIR | sed -e 's/\/$//'`/"
	msg "State dir is '$STATE_DIR'"

	export SOURCE_LIST
	export DEST_DIR
	export NICENESS
	export MODE
	export OWNERSHIP
	export PGP
	export PGP_RECP
	export PRE
	export POST
	export PRE_EACH
	export POST_EACH
}

#
# init_vars() : Set some default variable values.
#
function init_vars() {
	export VERSION=0.8
}

#
# do_backup() : ...
#
function do_backup() {
	SOURCE="$1"
	DEST_FILE="$2"

	# Run the Pre script, if any
	set_state "preprocess:start:$SOURCE:$DEST_FILE"
	if [ "$PRE_EACH" ]; then
		$PRE_EACH
	fi
	set_state "preprocess:done:$SOURCE:$DEST_FILE"

	set_state "backup:start:$SOURCE:$DEST_FILE"
	msg "Backing up: $SOURCE -> ${DEST_FILE}"
	nice -n $NICENESS tar --one-file-system -pPcjf ${DEST_FILE} $SOURCE
	set_state "backup:done:$SOURCE:$DEST_FILE"

	# Run the post script, if any
	set_state "postprocess:$SOURCE:$DEST_FILE"
	if [ "$POST_EACH" ]; then
		$POST_EACH
		EXITCODE=$?
		if [ "$EXITCODE" -ne "0" ]; then
			err "POST script '$POST' failed. Aborting..."
			exit
		fi
	fi
}

function set_state() {
	# FIXME: This is supposed to do something.
	#if [ ! -d "${STATE_DIR}state" ]; then
	#	echo "FOOBAR"
	#	exit
	#fi
	STEP="$*"
	dbg "Setting state:"
	dbg "  STEP = $STEP"
	echo "$STEP" >> "${STATE_DIR}state"
}

init_vars
handle_cmdline $*
get_config $CONFIG

#
# Run the Pre script, if any
#
if [ "$PRE" ]; then
	msg "Running PRE script '$PRE'";
	$PRE
fi

#
# Check some mandatory stuff which backup needs to run
#
dbg "Preparing for backup."

if [ ! -e $DEST_DIR ]; then 
	dbg "Backup storage dir $DEST_DIR does not exist. Attempting to create."; 

	mkdir -p "$DEST_DIR" 2> /dev/null;
	if [ ! -e "$DEST_DIR" ]; then 
		err "Couldn't create backup storage directory '$DEST_DIR'. Aborting..."
		exit
	fi
	dbg "Setting permissions/ownership on backup storage dir $DEST_DIR"
	chmod 700 $DEST_DIR
	chown $OWNERSHIP $DEST_DIR
fi
if [ ! -w $DEST_DIR ]; then 
	err "Couldn't get write access to backup storage directory '$DEST_DIR'. Aborting..."
	exit
fi

#
#
dbg "Starting the preprocess of the backup list"
FINAL_SOURCE_LIST=`tempfile`
for SOURCE in `cat $SOURCE_LIST | grep -v "#" | grep -vx ""`
do
	dbg "Preprocessing source : $SOURCE"
	# Split the source (TYPE:LOCATION)
	SOURCE_TYPE=`echo $SOURCE | sed "s/\(.\):.*/\1/g"`
	SOURCE_LOC=`echo $SOURCE | sed "s/.:\(.*\)/\1/g"`

	case "$SOURCE_TYPE" in
		# Include directive
		I|i)
			# Include the output of a script
			if [ -x "$SOURCE_LOC" ]; then
				echo "`$SOURCE_LOC`" >> $FINAL_SOURCE_LIST
			else
				err "$SOURCE_LOC is not a valid executable. Skipping."
			fi
			;;

		# Any other directive is taken as-is.
		*)
			echo $SOURCE >> $FINAL_SOURCE_LIST
			;;
	esac
done
dbg "Final sources list: \n--\n`cat $FINAL_SOURCE_LIST`\n--"

#
# Start the backup procedure. This walks through the list of final directives
# and determines how they should be backed up. In the case of a directory, the
# directory is made into a tar archive.  Single files also are made into a tar
# archive. Scripts are run and the output the place in a directory is made into
# a tar archive.
#
dbg "Starting the backup process"
for SOURCE in `cat $FINAL_SOURCE_LIST | grep -v "#" | grep -vx ""`
do
	dbg "Processing source : $SOURCE"
	# Split the source (TYPE:LOCATION)
	SOURCE_TYPE="`echo $SOURCE | sed \"s/\(.\):.*/\1/g\"`"
	SOURCE_LOC="`echo $SOURCE | sed \"s/.:\(.*\)/\1/g\"`"

	case "$SOURCE_TYPE" in
		# Directory
		D|d)
			# remove pending and trailing backslashes
			FINAL_SOURCE="/`echo $SOURCE_LOC | sed -e 's/^\///;s/\/$//'`/"
			FINAL_DEST="$DEST_DIR`echo $SOURCE_LOC | sed -e 's/^\///;s/\/$//' | tr \/ \.`.tar.bz2"
			dbg "Final source = '$FINAL_SOURCE'"
			dbg "Final destination = '$FINAL_DEST'"
			do_backup "$FINAL_SOURCE" "$FINAL_DEST"
			;;

		# Custom
		C|c)
			if [ ! -x "$SOURCE_LOC" ]; then
				err "$SOURCE_LOC is not an executable script. Skipping."
			fi
			`$SOURCE_LOC $DEST_DIR`
			;;

		# Script
		S|s)
			if [ ! -x "$SOURCE_LOC" ]; then
				err "$SOURCE_LOC is not an executable script. Skipping."
			else
				# Run script which will output its files in tempdir
				TEMPDIR="`mktemp -d`"
				NAME="`$SOURCE_LOC $TEMPDIR`"

				# Backup tempdir as a single backup source
				FINAL_SOURCE="$TEMPDIR/"
				if [ "$NAME" == "" ]; then
					FINAL_DEST="$DEST_DIR`echo $SOURCE_LOC | sed -e 's/^\///;s/\/$//' | tr \/ \.`.tar.bz2"
				else
					FINAL_DEST="`echo $NAME | sed -e 's/^\///;s/\/$//' | tr \/ \.`.tar.bz2"
				fi
				do_backup "$FINAL_SOURCE" "$FINAL_DEST"

				rm -rf "$TEMPDIR"
			fi

			;;
		# Unknown backup type
		*)
			err "Unknown type '$SOURCE_TYPE' in '$SOURCE'. Skipping."
			;;
	esac

done

#
# Set the rights
#
msg "Setting permissions $MODE on backups"
chmod $MODE "$DEST_DIR"*;
msg "Setting ownership $OWNERSHIP on backups"
chown $OWNERSHIP "$DEST_DIR"*;

#
# Run the post script, if any
#
if [ "$POST" ]; then
	msg "Running POST script '$POST'";
	$POST
	EXITCODE=$?
	if [ "$EXITCODE" -ne "0" ]; then
		err "POST script '$POST' failed. Aborting..."
		exit
	fi
fi

#
# Do some cleaning up
#
rm -f $FINAL_SOURCE_LIST

#
# Done...
#
msg "Done."
