#!/bin/sh
#
#  backup v0.5
#
#  Backup allows the automation of a backup process through the use of a
#  file which contains the paths to backup. You can use this program from 
#  the commandline, or by invoking it, let say, monthly through a cronjob.
#  To run this script through a cronjob, and be mailed automatically when
#  a backup is made, you can add the following line to your /etc/crontab:
#
#  00 2    1 * *   root    /usr/local/sbin/backup
#
#  to run a backup every first of the month at 02:00 and mail the result 
#  to the root user (if your crontab is set up correctly anyways)
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

function usage() {
	echo "Backup v$VERSION"
	echo "Usage: $0 -v -c"
	echo
	echo "-v, --verbose         Show lots of output"
    echo "-c, --config CONFIG   Configuration file to use."
}

function msg() {
	if [ "$FLAG_VERBOSE" ]; then
		echo $*
	fi
}

function handle_cmdline() {
	TEMP=`getopt -o vc:h --long verbose,config:,help -n 'backup' -- "$@"`

	if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

	eval set -- "$TEMP"

	while true ; do
		case "$1" in
			-c|--config)   CONFIG=$2;      shift 2 ;;
			-v|--verbose)  FLAG_VERBOSE=1; shift 1 ;;
			-h|--help)     FLAG_HELP=1;    shift 1 ;;
			--)                            shift 1; break ;;
			*)             echo "Internal error!" ; exit 1 ;;
		esac
	done

	if [ "$FLAG_HELP" ]; then
		usage
	fi
}

function get_config() {
	# Find configuration file
	if [ "$CONFIG" ]; then
		if [ -r "$CONFIG" ]; then
			msg "Using config '$CONFIG'."
			source "$CONFIG"
		else
			echo "Couldn't read config '$CONFIG'. Aborting." >&2
			exit
		fi
	elif [ -r ./backup.conf ]; then 
		msg "Using config './backup.conf'."
		source "./backup.conf"
	elif [ -r /etc/backup.conf ]; then 
		msg "Using config '/etc/backup.conf'."
		source "/etc/backup.conf"
	else 
		echo "No usable configuration found. Aborting.." >&2
		exit
	fi

	# Verify configuration
	if [ ! "$SOURCE_LIST" -o ! "$DEST_DIR" ]; then
		echo "Configuration '$CONFIG' isn't valid. Aborting.." >&2
		exit
	fi
	if [ ! "$MODE" ]; then
		MODE=600
	fi
	if [ ! "$NICENESS" ]; then
		NICENESS=19
	fi
	if [ "$PRE_EACH" ]; then
		if [ ! -x "$PRE_EACH" ]; then
			echo "Couldn't run PRE_EACH script '$PRE_EACH'. Aborting..." >&2
			exit
		fi
	fi
	if [ "$POST_EACH" ]; then
		if [ ! -x "$POST_EACH" ]; then
			echo "Couldn't run POST_EACH script '$POST_EACH'. Aborting..." >&2
			exit
		fi
	fi

	# Sanitize configuration options
	DEST_DIR="/`echo $DEST_DIR | sed -e 's/^\///;s/\/$//'`/"

	export SOURCE_LIST
	export DEST_DIR
	export NICENESS
	export MODE
	export PRE
	export POST
	export PRE_EACH
	export POST_EACH
}

function init_vars() {
	export VERSION=0.5
	export TEMPFILE=`tempfile`
	export ERROR=0

}

init_vars
handle_cmdline $*
get_config

#
# Run the Pre script, if any
#
if [ "$PRE" ]; then
	msg "Running PRE script '$PRE'";
	$PRE
fi

#
# Check some mandatory stuff which backup needs to run
#
msg "Preparing for backup."

if [ ! -e $DEST_DIR ]; then 
	msg "Backup storage dir $DEST_DIR does not exist. Attempting to create."; 

	mkdir $DEST_DIR 2> /dev/null;
	if [ ! -e $DEST_DIR ]; then 
		echo "Couldn't create backup storage directory '$DEST_DIR'. Aborting..." >&2
	fi
	chmod 700 $DEST_DIR
fi
if [ ! -w $DEST_DIR ]; then 
	echo "Couldn't get write access to backup storage directory '$DEST_DIR'. Aborting..." >&2
	exit
fi

#
# Start the backup procedure
#
msg "Starting the backup process"
for SOURCE_DIR in `cat $SOURCE_LIST | grep -v "#" | grep -vx ""`
do
	# remove pending and trailing backslashes
	SOURCE_DIR="`echo $SOURCE_DIR | sed -e 's/^\///;s/\/$//'`"

	export DEST_FILE="`echo $SOURCE_DIR | sed -e 's/^\///;s/\/$//' | tr \/ \.`.tar.bz2"
	export SOURCE_DIR="/$SOURCE_DIR/"

	# Run the Pre script, if any
	if [ "$PRE_EACH" ]; then
		$PRE_EACH
	fi

	msg "Backing up: $SOURCE_DIR -> ${DEST_DIR}${DEST_FILE}"
	nice -n $NICENESS tar -pPcjf ${DEST_DIR}${DEST_FILE} $SOURCE_DIR

	# Run the post script, if any
	if [ "$POST_EACH" ]; then
		$POST_EACH
	fi
done

#
# Set the rights
#
msg "Setting permissions $MODE on backups"
chmod $MODE $DEST_DIR/*;

#
# Run the post script, if any
#
if [ "$POST" ]; then
	msg "Running POST script '$POST'";
	$POST
fi

#
# Done...
#
msg "Done."
